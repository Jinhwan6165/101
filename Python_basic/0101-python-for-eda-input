* 무료로 공부할 수 있는 파이썬 온라인 자료
* [The Python Tutorial — Python documentation](https://docs.python.org/3/tutorial/index.html)
* [점프 투 파이썬 - WikiDocs](https://wikidocs.net/book/1)
* [강좌: 파이썬 코딩 도장](https://dojang.io/course/view.php?id=7)

# 현재 주피터 노트북이 있는 경로  : %pwd
%pwd

## Zen of Python
* 파이썬의 철학이 잘 담겨있는 Zen of Python 을 출력해 봅니다.
* import를 통해 파이썬의 라이브러리나 패키지를 가져올 수 있습니다.

import this

## boolean
* 파이썬에는 명시적인 것이 암시적인 것보다 낫다라는 철학이 있습니다.
* True나 False는 0과 1로도 표현할 수 있으나 명시적으로 표현하기 위해 True와 False를 사용합니다.
* 파이썬은 대소문자를 구분한다.

# True를 출력해 보세요. (모두 대/소문자로 입력할 경우, 오류가 난다. 반드시 대소문자 구분 필요 !!!)
True

# False 를 출력해 보세요. (초록색으로 보이는 단어를 '예약어'라고 하며, 미리 정해진 단어이다.  변수로 쓰면 안된다.)
False

# True는 1과 같음을 표현해 보세요. 파이썬에서는 같음을 비교할 때 == 연산을 사용합니다.
True == 1

# False는 0과 같음을 표현해 보세요. 파이썬에서는 같음을 비교할 때 == 연산을 사용합니다.
False == 0

# 하지만 True는 문자 1과는 다릅니다. 1을 따옴표로 감싸면 문자열이 됩니다.
True == "1"

# 문자열 1과 True는 다릅니다.
"1" == True

# False 도 마찬가지 입니다. 
False == 0

# 문자열 0과 False는 다릅니다.
False == "0"

# and 연산으로 True 값 끼리 비교합니다.
# and 는 모든 값이 True 일때만 True 가 됩니다.
True and True

# and 는 조건 중 하나라도 False 라면 False가 됩니다.
True and False

# or 는 하나만 True 라도 True가 됩니다.
True or False

# True == 1, False == 0 과 같기 때문에 연산을 할 수 있습니다.
True + True + False

## 숫자
* 숫자 1과 문자 "1"은 다릅니다. 숫자1과 문자1의 데이터 타입을 출력해 보세요.
* 데이터 타입을 표현할 때 type을 통해 데이터를 출력합니다.

# 숫자 1을 출력해 보세요.
1

# 문자 1을 출력해 보세요.
"1"

# 숫자 1의 데이터 타입을 출력해 보세요.
type(1)

# 문자 1의 데이터 타입을 출력해 보세요.
type("1")

# 문자 1과 숫자 1을 비교합니다.
1 == "1"

1 == 1 

## 변수
* 숫자로 시작할 수 없습니다.
* 언더바(_)를 제외한 특수문자를 사용할 수 없습니다.

|연산자|기능|
|--|--|
| == | 비교연산 |
| = | 할당연산 |

a = 1

b= a + 1
b

a + b

a - b

## 문자열
* https://docs.python.org/3/tutorial/introduction.html#strings

# "Hello World!" 를 출력해 봅니다. ("" 만 쳐서 출력한 결과는 결측치가 아니라 값이 있다라고 보는 것이다.)
"Hello World!"

'Hello World!' #겹따옴표와 홑따옴표 모두 사용 가능

"python's lang"

"'python''s lang"   # 겹따옴표와 홑따옴표를 같이 쓸수 있다.

# til 이라는 변수에 문자열을 담아봅니다.
til = "Today I Learned"
til
til
til

# 소문자로 만들어 보세요.
til.lower()

# 대문자로 만들어 보세요.
til.upper()

# 주소 "서울특별시 강남구 역삼동 강남대로94길 15 S2빌딩 3층"을 출력해 봅니다.
"서울특별시 강남구 역삼동 강남대로94길 15 S2빌딩 3층"

# 주소를 address 변수에 담습니다.
address = " 서울특별시 강남구 역삼동 강남대로94길 15 S2빌딩 3층"
address

# strip 메소드를 사용해 공백을 제거합니다.
address = address.strip()
address

### 문자열의 인덱싱과 슬라이싱

#### 파이썬에서는 인덱스가 0부터 시작한다.

# 인덱싱으로 문자 가져오기
address[0]

# 인덱싱으로 문자 가져오기
address[-1]

# 슬라이싱으로 문자 가져오기
# [시작인덱스 : 끝나는 인덱스 +1]
address[0:5]

## 리스트

* https://docs.python.org/3/tutorial/introduction.html#lists

# 비어있는 리스트를 만듭니다.
[]

# 소화제, 감기약을 원소에 추가합니다.
["소화제","감기약"]

# medicine 라는 변수에 해열제를 담아봅니다.
medicine = ["소화제", "감기약 ", "비타민", "해열제"]
medicine

### 리스트에 원소 추가 삭제하기

# append 로 "마그네슘" 원소 추가하기
medicine.append("마그네슘")
medicine

# remove 로 원소 삭제하기
medicine.remove("마그네슘")
medicine

### 리스트의 인덱싱

# medicine 라는 변수에 담겨있는 소화제를 인덱싱을 통해 가져옵니다.
medicine[0]

# 1번 인덱스를 가져옵니다.
medicine[1]

# 마지막 인덱스를 가져옵니다.
medicine[-1]

### 문자열을 리스트로 만들기

# split을 사용해 address를 공백으로 문자열 분리하고 address_list 라는 변수에 담습니다.
# address.split("시") 원하는 문자를 기준으로 나누고 싶은 경우
address_list = address.split()
address_list

type(address)

type(address_list)

# 문자열의 길이
len(address)

# 리스트의 길이
len(address_list)

# 인덱싱으로 서울특별시만 가져옵니다.
address_list[0]

# 인덱싱으로 강남구만 가져옵니다.
address_list[1]

# 슬라이싱으로 "강남구" 만 가져오기
# [시작인덱스:끝나는인덱스+1]
address[6:9]

# startswith 를 사용하면 특정 문자로 시작하는지 여부를 확인할 수 있습니다.
address.startswith("서울")

### 문자열과 리스트의 in

# in 을 사용하게 되면 특정 문자열을 포함하고 있는지 여부를 확인할 수 있습니다.
"서울" in address

address_list

# in 을 사용하게 되면 리스트에 해당 데이터를 포함하고 있는지 여부를 확인할 수 있습니다.
# "서울특별시"가 리스트에 포함되는지 봅니다.
"서울" in address_list

"서울특별시" in address_list

# in 을 사용하게 되면 리스트에 해당 데이터를 포함하고 있는지 여부를 확인할 수 있습니다.
# "강남구"가 리스트에 포함되는지 봅니다.
"강남구" in address_list

# " ".join(리스트) 를 사용하면 리스트를 공백 문자열을 연결할 수 있습니다.
# 리스트로 분리된 문자열을 다시 연결합니다.
# add 
" ".join(address_list)
#"-".join(address_list)    

## 딕셔너리
* https://docs.python.org/3/tutorial/datastructures.html#dictionaries

phone = {'서울' : '02',
         '경기': '031',
         '인천': '032',
         '대전': '042',
         '부산': '051',
         '울산': '052',
         '대구': '053',
         '광주': '062'}
phone

# "서울" 의 값 가져오기
phone["서울"]

# "경기" 의 값 가져오기
phone["경기"]

# "제주" : 063 을 딕셔너리에 추가하기
phone["제주"] = "063"
phone

##  제어문
* 조건문(if)
* 반복문(for, while)
* [4. More Control Flow Tools — Python documentation](https://docs.python.org/3/tutorial/controlflow.html)


# range를 사용하면 for문의 반복수를 지정할 수 있습니다.
for i in range(10):
    print(i)

# range 를 사용해 5번 for문을 반복하도록 하고 인덱스 번호가 짝수일 때 소화제 홀수 일 때 해열제를 출력하도록 합니다.
# for 문 콜론 뒤에 들여쓰기 4칸
for i in range(5):
    if i %2 == 0: #짝수
        print(i,"소화제")
    else:
        print(i, "해열제")

medicine

# 반복문을 통해 medicine이라는 변수에 담긴 리스트의 원소를 하나씩 출력합니다.
for m in medicine:
    print(m)

# 위 코드에서 소화제일 때는 그대로 출력하고 나머지 텍스트는 "기타"라고 출력합니다
# 출력 결과가 아래의 순서로 나오도록 합니다.
# 소화제
# 기타
# 기타
# for 변수명 in 리스트명:'
for m in medicine:
    if m == "소화제":
        print(m)
    else:
        print("기타")

# store 변수에 지점명을 담아줍니다.
store = ["서울역점", "강남점", "마포점", "여의도점"]
store

# 지점별로 print문을 통해 출력해 봅니다.
for s in store:
    print(s)

# enumerate를 사용하면 인덱스 번호와 원소를 같이 가져올 수 있습니다.
for s in enumerate(store):
    print(s)

# enumerate를 사용하면 인덱스 번호와 원소를 같이 가져올 수 있습니다.
for i, s in enumerate(store):
    print(i,s)

### 응용
*  딕셔너리의 결과가 아래와 같이 나오도록 아래의 문자열을 변경해 보세요.
```
{'경기': '031',
 '강원': '033',
 '충남': '041',
 '충북': '043',
 '경북': '054',
 '경남': '055',
 '전남': '061',
 '전북': '063'}
``` 

# 아래의 문자를 딕셔너리 형태로 변경하기
phone = ">경기 031 >강원 033 >충남 041 >충북 043 >경북 054 >경남 055 >전남 061 >전북 063"
# ">" 문자를 기준으로 문자열을 나눕니다.
# phone_split
phone_list= phone.split(">")
phone_list

phone_dict=[]


## 함수

date = "2020.11.01"
date

#Ctrl + / : 주석처리
def parse_month(date):
    """월을 반환하는 함수"""
    month = date.split(".")[1]
    return month

parse_month(date)

def parse_phone(phone_num):
    """전화번호의 국번을 반환하는 함수"""  # """ """ Docstring 이라고 불림.
    return phone_num.split("-")[0]

parse_phone("010-1234-1234")

#?: 도움말
#??: 소스코드 볼 수 있다.
parse_month??

date.split?

